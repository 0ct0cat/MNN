IF(MNN_BUILD_CONVERTER)
  option(TF_CONVERT_ORIGIN "Fall Back to Origin Model Converter" OFF)
  option(TFMODEL_OPTIMIZE "Enable tensorflow model optimizer" OFF)
  IF(MNN_PORTABLE_BUILD)
    SET(Protobuf_USE_STATIC_LIBS ON)
  ENDIF()
  find_package(Protobuf REQUIRED)
  IF("${Protobuf_VERSION}" VERSION_LESS "3.0.0")
    IF(NOT "${Protobuf_VERSION}" STREQUAL "")
      # Simply broken installation. Abort
      message(FATAL_ERROR "Protobuf3 is required. You have ${Protobuf_VERSION}")
    ELSE()
      message(WARNING "Protobuf version is unknown. Your protobuf installation is likely broken or incomplete. Blindly applying signatures...")
      IF("${Protobuf_LIBRARIES}" STREQUAL "")
        message(WARNING "Protobuf_LIBRARIES is empty")
        SET(Protobuf_LIBRARIES "-lprotobuf -lpthread")
      ELSE()
        message(STATUS "Got Protobuf_LIBRARIES:${Protobuf_LIBRARIES}")
      ENDIF()
    ENDIF()
  ENDIF()
  SET(MNN_CONVERTER_INC ${CMAKE_CURRENT_LIST_DIR}/include/ ${CMAKE_CURRENT_LIST_DIR}/source/tflite/schema/ ${Protobuf_INCLUDE_DIRS})
  SET(MNN_CONVERTER_BACKENDS_TARGETS "")
  SET(MNN_CONVERTER_BACKENDS_OBJECTS "")
  include(${CMAKE_CURRENT_LIST_DIR}/source/tensorflow/CMakeLists.txt)
  if(TFMODEL_OPTIMIZE)
    target_add_definitions(MNNConverterTF PRIVATE -DTFMODEL_OPTIMIZE)
  endif()
  if (TF_CONVERT_ORIGIN)
    target_add_definitions(MNNConverterTF PRIVATE -DTF_CONVERT_ORIGIN)
  endif()
  include(${CMAKE_CURRENT_LIST_DIR}/source/onnx/CMakeLists.txt)
  include(${CMAKE_CURRENT_LIST_DIR}/source/caffe/CMakeLists.txt)
  include(${CMAKE_CURRENT_LIST_DIR}/source/MNN/CMakeLists.txt)
  include(${CMAKE_CURRENT_LIST_DIR}/source/optimizer/CMakeLists.txt)
  include(${CMAKE_CURRENT_LIST_DIR}/source/tflite/CMakeLists.txt)

  file(GLOB COMMON_SRC ${CMAKE_CURRENT_LIST_DIR}/source/common/*.cpp)
  add_executable(MNNDump2JSON ${CMAKE_CURRENT_LIST_DIR}/source/MNNDump2Json.cpp)
  add_dependencies(MNNDump2JSON MNN_SCHEMA_GEN)
  set_source_files_properties(${CMAKE_CURRENT_LIST_DIR}/source/cli.cpp PROPERTIES COMPILE_FLAGS -frtti)
  add_executable(MNNConvert ${CMAKE_CURRENT_LIST_DIR}/source/MNNConverter.cpp ${CMAKE_CURRENT_LIST_DIR}/source/cli.cpp ${CMAKE_CURRENT_LIST_DIR}/source/config.cpp)
  add_library(MNNConvertDeps STATIC ${COMMON_SRC} ${MNN_CONVERTER_BACKENDS_OBJECTS} ${PROJECT_SOURCE_DIR}/cmake/dummy.cpp)
  target_link_libraries(MNNConvert MNN MNNConvertDeps ${Protobuf_LIBRARIES})
  IF(NOT MNN_BUILD_SHARED_LIBS)
    if(APPLE)
        target_link_libraries(MNNConvert -Wl,-all_load MNNConvertDeps -Wl,-noall_load)
    elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        target_link_libraries(MNNConvert -Wl,--whole-archive MNNConvertDeps -Wl,--no-whole-archive)
    endif()
  ENDIF()
  add_dependencies(MNNConvert MNN_SCHEMA_GEN)
  FOREACH(CONVERTER_TARGET ${MNN_CONVERTER_BACKENDS_TARGETS} MNNConvert MNNDump2JSON MNNConvertDeps)
    target_include_directories(${CONVERTER_TARGET} PRIVATE ${MNN_CONVERTER_INC})
    add_dependencies(${CONVERTER_TARGET} MNN_SCHEMA_GEN)
  ENDFOREACH()
ENDIF()
